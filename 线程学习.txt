一种常见的加锁约定是，将所有的可变状态都封装在对象内部，并通过对象的内置锁对所欲访问可变状态的代码路径进行同步，使得在该对象上不会发生并发访问。

对于每个包含多个变量的不变性条件，其中涉及的所有变量都需要由同一个锁来保护

当且仅当满足以下所有条件时，才应该使用Volatile变量：
对变量的写入操作不依赖变量的当前值，或者能确保只有单个线程更新变量的值
该变量不会与其他状态变量一起纳入不变性条件中
在访问变量时不需要加锁


Ad-hoc线程封闭
Ad-hoc线程封闭是指，维护线程的封闭特性的职责完全由程序实现来承担。

栈封闭是指，在栈封闭中， 只能通过局部变量才能访问对象。	

同步类工具
1，闭锁：闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有任何线程能通过，当到达结束状态时，这扇门会打开并允许所有线程通过，当闭锁到达结束状态后，将不会再改变状态。因此这扇门将永远保持打开状态。
2.FutureTask也可以用做闭锁。
3，信号量 ，Semaphore 中管理着一组虚拟的许可，许可的初始数量可通过构造函数来指定。在执行操作时可以首先获取许可（只要还有剩余的许可），并在使用后释放许可。如果没有许可，那么acquire 将阻塞直到有许可（或者直到被中断或者操作执行超时）。release方法将返回一个许可信号量。
4，栅栏 ：栅栏类似闭锁，它能阻塞一一组线程直到某个事件发生。栅栏域 闭锁的区别在于，所有线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其他线程。CyclicBarrier可以使一定数量的参与方法反复的在栅栏位置汇集。