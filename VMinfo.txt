--本地方法栈   虚拟机使用的Native方法服务
--虚拟机栈     虚拟机执行java方法服务,他是线程私有的，生命周期与线程相同，每个方法在执行的同时会创建一个栈帧，用户存储局部变量，操作数栈，动态链接，方法出入口等信息。
--java堆      是java虚拟机所管理的内存中最大的一块。是被所有线程共享的一块内存区域，在虚拟机启动时候创建，此区域唯一的目的就是存放对象实例。
--方法区      也是各个线程共享的内存区域，它用户存储已被虚拟机加载的类信息，常量，静态变量，即时编译后的代码等数据。（永久代） 
			1，运行时常量池 --运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类的加载后进入方法区的运行时常量池中存放
--直接内存  -Xmx 本机内存，本地方法操控


java引用 
--强引用
--软引用
--弱引用
--虚引用

--回收新生代是复制算法
新生代内存被分为Eden(80%) Survivor1(10%),Survivor2(10%),每次使用Eden和其中一个S，当gc时，将存活的对象复制到另一个S上，清空Eden和S。当S空间不够用是会依赖其老年代来进行分配担保。
--老年代 标记整理算法，标记处需要回收的对象，然后让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。

--虚拟机提供了一个 -XX:PretenureSizeThreshold 参数，另大于这个设置值的对象直接在老年代分配

--对象在Survivor中每经过一次MinorGC 年龄增加1岁，默认15岁会被晋升到老年代中  对与 晋升老年代的年龄阀值，可以通过参数-XX:MaxTenuringThreshold设置。动态对象年龄判断，如果在survivor空间中所有对象大小的总和大于
Survivor空间的一半。年龄大于或等改年龄的对象就可以直接进入老年代。

jstat -gcutil pid 查看堆的监视结果
jmap -heap pid 查看java堆的详细信息
jmap -dump:format=b,file=xxx  pid 生成一个正在运行的dump快照
jhat xxx 分析生成的dump快照 当现实server is ready ,可在浏览器中输入http://ip:7000查看分析结果
